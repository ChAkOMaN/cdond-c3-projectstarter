version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/SNCCzzsvF6UcfRCAjmSQBs/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
                cd ~/project/backend
                npm install
                npm run migration:revert              
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backtend-build]
      - run:
          name: Audit back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople        
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [5b:5f:ad:9d:9a:a6:76:ff:bd:20:94:48:49:06:19:e8]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip
            python3 -m pip install --user ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
         name: Install dependencies
         command: |
           sudo apt update -y
           sudo apt install awscli -y      
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            #npm audit fix > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/SNCCzzsvF6UcfRCAjmSQBs/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"            

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt install awscli -y               
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}" >> frontend/.env
            cat frontend/.env            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install            
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"              
                    
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0  #python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [5b:5f:ad:9d:9a:a6:76:ff:bd:20:94:48:49:06:19:e8]
      - attach_workspace:
          at: ~/          
      - restore_cache:
          keys: [backend-build]     
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y tar gzip curl     
      - run:
          name: Install AWS CLI
          command: |
            sudo apt update -y
            sudo apt install awscli -y                
      - run:
          name: Install Ansible
          command: |
            sudo apt update 
            sudo apt install ansible -y        
            #sudo apt install python3
            #sudo apt install python3-pip
            #python3 -m pip install --user ansible                      
      - run:
          name: Setting backend envs
          command: |
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"          
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"            

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum upgrade -y 
            yum install curl -y
      - run:
          name: Get backend url and smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "BACKEND_IP=${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            sleep 30
            if curl "${API_URL}/api/status" | grep "ok"
            then
                echo "Smoke BackEnd Test Successfully"
                exit 0
            else
                echo "Smoke BackEnd Test Failed"
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                echo "Smoke FrontEnd Test Successfully"
                exit 0
            else
                echo "Smoke FrontEnd Test Failed"
                exit 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"            

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y curl tar gzip 
      - run:
          name: Store current workflow id as OldWorkflowID.txt
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "Current stacks: ${STACKS[@]}"
            echo ${OldWorkflowID} >> ~/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt            
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                  --template-file .circleci/files/cloudfront.yml \
                  --stack-name InitialStack \
                  --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --tags project=udapeople
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y curl tar gzip       
      - attach_workspace:
          at: ~/            
      - run:
          name: Get old stack workflow id and remove stacks
          command: |
            # Fetch the Old workflow ID
            pwd
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"    

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID:10:17}" ]]
            then
              echo 'Delete Confirmed: ' "${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID:10:17}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:10:17}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:10:17}"              
              echo 'Successfully removed old stacks!!'
            else
              echo 'Cannot Cleanup'
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]